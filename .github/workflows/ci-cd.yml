name: CI/CD

on:
  push:
    branches-ignore:
    - dependabot/**
  pull_request:
  schedule:
  - cron: 1 0 * * *  # Run daily at 0:01 UTC

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  lint:
    name: 🧹 Lint

    needs:
    - build
    - pre-setup  # transitive, for accessing settings

    runs-on: ubuntu-latest

    env:
      PY_COLORS: 1

    steps:
    - name: Switch to using Python 3.10 by default
      uses: actions/setup-python@v4
      with:
        python-version: >-
          3.10
    - name: >-
        Calculate Python interpreter version hash value
        for use in the cache key
      id: calc-cache-key-py
      run: |
        from hashlib import sha512
        from sys import version
        hash = sha512(version.encode()).hexdigest()
        print(f'::set-output name=py-hash-key::{hash}')
      shell: python
    - name: Get pip cache dir
      id: pip-cache-dir
      run: >-
        echo "::set-output name=dir::$(python -m pip cache dir)"
    - name: Set up pip cache
      uses: actions/cache@v3.0.8
      with:
        path: ${{ steps.pip-cache-dir.outputs.dir }}
        key: >-
          ${{ runner.os }}-pip-${{
          steps.calc-cache-key-py.outputs.py-hash-key }}-${{
          needs.pre-setup.outputs.cache-key-files }}
        restore-keys: |
          ${{ runner.os }}-pip-${{
              steps.calc-cache-key-py.outputs.py-hash-key
          }}-
          ${{ runner.os }}-pip-

    - name: Grab the source from Git
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.release-commitish }}

    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

    - name: Install build tools
      run: >-
        python -m
        pip install
        --user
        --requirement requirements-dev.txt

    - name: flake8 Lint
      uses: py-actions/flake8@v2.2.0
      with:
        flake8-version: 4.0.1
        path: aiomysql
        args: tests examples

    - name: Check package description
      run: |
        python -m twine check --strict dist/*

  tests:
    name: >-
      🧪 🐍${{
          matrix.py
      }} @ ${{
          matrix.os
      }} on ${{
          join(matrix.db, '-')
      }}
    needs:
    - build
    - pre-setup  # transitive, for accessing settings
    strategy:
      # when updating matrix jobs make sure to adjust the expected reports in
      # codecov.notify.after_n_builds in .codecov.yml
      matrix:
        # service containers are only supported on ubuntu currently
        os:
        - ubuntu-latest
        py:
        - '3.7'
        # - '3.8'
        # - '3.9'
        # - '3.10'
        # - '3.11-dev'
        db:
        # - [mysql, '5.7']
        - [mysql, '8.0']
        # - [mariadb, '10.3']
        # - [mariadb, '10.4']
        # - [mariadb, '10.5']
        # - [mariadb, '10.6']
        # - [mariadb, '10.7']
        # - [mariadb, '10.8']

      fail-fast: false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15

    continue-on-error: >-
      ${{
          (
            (
              needs.pre-setup.outputs.release-requested == 'true' &&
              !toJSON(github.event.inputs.YOLO)
            ) ||
            contains(matrix.py, '-dev')
          ) && true || false
      }}

    env:
      MYSQL_ROOT_PASSWORD: rootpw
      PY_COLORS: 1

    services:
      mysql:
        image: "${{ join(matrix.db, ':') }}"
        ports:
        - 3306:3306
        volumes:
        - "/tmp/run-${{ join(matrix.db, '-') }}/:/socket-mount/"
        options: '--name=mysqld'
        env:
          MYSQL_ROOT_PASSWORD: rootpw
      haproxy:
        image: haproxytech/haproxy-alpine:2.6
        ports:
          - 13306:13306
        volumes:
        - "/tmp/run-${{ join(matrix.db, '-') }}/:/var/lib/haproxy/socket-mount/"
        options: '--name=haproxy'

    steps:
    - name: Setup Python ${{ matrix.py }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.py }}

    - name: Figure out if the interpreter ABI is stable
      id: py-abi
      run: |
        from sys import version_info
        is_stable_abi = version_info.releaselevel == 'final'
        print(
            '::set-output name=is-stable-abi::{is_stable_abi}'.
            format(is_stable_abi=str(is_stable_abi).lower())
        )
      shell: python

    - name: >-
        Calculate Python interpreter version hash value
        for use in the cache key
      if: fromJSON(steps.py-abi.outputs.is-stable-abi)
      id: calc-cache-key-py
      run: |
        from hashlib import sha512
        from sys import version
        hash = sha512(version.encode()).hexdigest()
        print('::set-output name=py-hash-key::{hash}'.format(hash=hash))
      shell: python

    - name: Get pip cache dir
      if: fromJSON(steps.py-abi.outputs.is-stable-abi)
      id: pip-cache-dir
      run: >-
        echo "::set-output name=dir::$(python -m pip cache dir)"

    - name: Set up pip cache
      if: fromJSON(steps.py-abi.outputs.is-stable-abi)
      uses: actions/cache@v3.0.8
      with:
        path: ${{ steps.pip-cache-dir.outputs.dir }}
        key: >-
          ${{ runner.os }}-pip-${{
          steps.calc-cache-key-py.outputs.py-hash-key }}-${{
          needs.pre-setup.outputs.cache-key-files }}
        restore-keys: |
          ${{ runner.os }}-pip-${{
              steps.calc-cache-key-py.outputs.py-hash-key
          }}-
          ${{ runner.os }}-pip-

    - name: Update pip
      run: >-
        python -m
        pip install
        --user
        --upgrade
        pip

    - name: Grab the source from Git
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.release-commitish }}

    - name: Remove aiomysql source to avoid accidentally using it
      run: >-
        rm -rf aiomysql

    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

    - name: Install dependencies
      run: >-
        python -m
        pip install
        --user
        --requirement requirements-dev.txt

    - name: Install previously built wheel
      run: >-
        python -m
        pip install
        --user
        'dist/${{ needs.pre-setup.outputs.wheel-artifact-name }}'

    - name: >-
        Log platform.platform()
      run: >-
        python -m platform
    - name: >-
        Log platform.version()
      run: >-
        python -c "import platform;
        print(platform.version())"
    - name: >-
        Log platform.uname()
      run: >-
        python -c "import platform;
        print(platform.uname())"
    - name: >-
        Log platform.release()
      run: >-
        python -c "import platform;
        print(platform.release())"
    - name: Log stdlib OpenSSL version
      run: >-
        python -c
        "import ssl; print('\nOPENSSL_VERSION: '
        + ssl.OPENSSL_VERSION + '\nOPENSSL_VERSION_INFO: '
        + repr(ssl.OPENSSL_VERSION_INFO)
        + '\nOPENSSL_VERSION_NUMBER: '
        + repr(ssl.OPENSSL_VERSION_NUMBER))"

    # this ensures our database is ready. typically by the time the preparations have completed its first start logic.
    # unfortunately we need this hacky workaround as GitHub Actions service containers can't reference data from our repo.
    - name: Prepare mysql
      run: |
        # we need to ensure that the socket path is readable from haproxy and
        # writable for the user running the DB process
        sudo chmod 0777 /tmp/run-${{ join(matrix.db, '-') }}

        # inject HAproxy configuration
        docker container stop haproxy

        docker container cp "${{ github.workspace }}/tests/ssl_resources/haproxy.cfg" haproxy:/usr/local/etc/haproxy/haproxy.cfg
        docker container cp "${{ github.workspace }}/tests/ssl_resources/ssl/server-combined.pem" haproxy:/usr/local/etc/haproxy/haproxy.pem

        docker container start haproxy

        # ensure server is started up
        while :
        do
            sleep 1
            mysql -h127.0.0.1 -uroot "-p$MYSQL_ROOT_PASSWORD" -e 'select version()' && break
        done

        # inject tls configuration
        docker container stop mysqld
        docker container cp "${{ github.workspace }}/tests/ssl_resources/ssl" mysqld:/etc/mysql/ssl
        docker container cp "${{ github.workspace }}/tests/ssl_resources/tls.cnf" mysqld:/etc/mysql/conf.d/aiomysql-tls.cnf

        # use custom socket path
        docker container cp "${{ github.workspace }}/tests/ssl_resources/socket.cnf" mysqld:/etc/mysql/conf.d/aiomysql-socket.cnf

        docker container start mysqld

        # ensure server is started up
        while :
        do
            sleep 1
            mysql -h127.0.0.1 -uroot "-p$MYSQL_ROOT_PASSWORD" -e 'select version()' && break
        done

        mysql -h127.0.0.1 -uroot "-p$MYSQL_ROOT_PASSWORD" -e "SET GLOBAL local_infile=on"

    - name: Run tests
      # timeout ensures a more or less clean stop by sending a KeyboardInterrupt which will still provide useful logs
      run: >-
        timeout
        --preserve-status
        --signal=INT
        --verbose 570s
        pytest
        --capture=no
        --verbosity 2
        --cov-report term
        --cov-report xml
        --cov aiomysql
        --cov tests
        ./tests
        --mysql-unix-socket "unix-${{ join(matrix.db, '') }}=/tmp/run-${{ join(matrix.db, '-') }}/mysql.sock"
        --mysql-address "tcp-${{ join(matrix.db, '') }}=127.0.0.1:3306"
        --mysql-address-tls "tls-${{ join(matrix.db, '') }}=127.0.0.1:13306"
      env:
        PYTHONUNBUFFERED: 1
      timeout-minutes: 10

    - name: Upload coverage
      if: ${{ github.event_name != 'schedule' }}
      uses: codecov/codecov-action@v3.1.0
      with:
        file: ./coverage.xml
        flags: "${{ matrix.os }}_${{ matrix.py }}_${{ join(matrix.db, '-') }}"
        fail_ci_if_error: true

  check:  # This job does nothing and is only used for the branch protection
    if: always()

    needs:
    - lint
    - tests

    runs-on: ubuntu-latest

    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@v1.1.0
      with:
        jobs: ${{ toJSON(needs) }}
